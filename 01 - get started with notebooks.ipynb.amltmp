{
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# Get Started with Notebooks in Azure Machine Learning\n"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      },
      "id": "308bc980-9404-4322-a8f1-9c7a20fbbc55"
    },
    {
      "cell_type": "markdown",
      "source": [
        "Azure Machine Learning is a cloud-based service for creating and managing machine learning solutions. It's designed to help data scientists and machine learning engineers leverage their existing data processing and model development skills and frameworks, and scale their workloads to the cloud.\n",
        "\n",
        "A lot of data science and machine learning work is accomplished in notebooks like this one. Notebooks consist of cells, some of which (like the one containing this text) are used for notes, graphics, and other content usually written using markdown; while others (like the cell below this one) contain code that you can run interactively within the notebook."
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      },
      "id": "f9731166-d21e-457e-b9a0-fe1d982baf87"
    },
    {
      "cell_type": "markdown",
      "source": [
        "## The Azure Machine Learning Python SDK\n",
        "\n"
      ],
      "metadata": {},
      "id": "6c9be49a-b293-4320-a5ec-e856abcd9258"
    },
    {
      "cell_type": "markdown",
      "source": [
        "You can run pretty much any Python code in a notebook, provided the required Python packages are installed in the environment where you're running it. In this case, you're running the notebook in a Conda environment on an Azure Machine Learning compute instance. This environment is installed in the compute instance by default, and contains common Python packages that data scientists typically work with. It also includes the Azure Machine Learning Python SDK, which is a Python package that enables you to write code that uses resources in your Azure Machine Learning workspace.\n",
        "\n",
        "Run the cell below to import the azureml-core package and checking the version of the SDK that is installed."
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      },
      "id": "36efec83-3201-4047-9c8a-8fb6565659bd"
    },
    {
      "cell_type": "markdown",
      "source": [
        "This is the main version"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      },
      "id": "21040943-94ec-4b6f-874c-d1c78d0b0194"
    },
    {
      "cell_type": "code",
      "source": [
        "pip show azure-ai-ml\n"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Name: azure-ai-ml\r\nVersion: 1.25.0\r\nSummary: Microsoft Azure Machine Learning Client Library for Python\r\nHome-page: https://github.com/Azure/azure-sdk-for-python\r\nAuthor: Microsoft Corporation\r\nAuthor-email: azuresdkengsysadmins@microsoft.com\r\nLicense: MIT License\r\nLocation: /anaconda/envs/azureml_py38/lib/python3.10/site-packages\r\nRequires: azure-common, azure-core, azure-mgmt-core, azure-monitor-opentelemetry, azure-storage-blob, azure-storage-file-datalake, azure-storage-file-share, colorama, isodate, jsonschema, marshmallow, msrest, pydash, pyjwt, pyyaml, strictyaml, tqdm, typing-extensions\r\nRequired-by: \r\nNote: you may need to restart the kernel to use updated packages.\n"
        }
      ],
      "execution_count": 10,
      "metadata": {
        "gather": {
          "logged": 1741299949907
        }
      },
      "id": "724bbce5-73fd-45b6-ac99-95a06376e602"
    },
    {
      "cell_type": "code",
      "source": [
        "import azureml.core\n",
        "print(\"Ready to use Azure ML\", azureml.core.VERSION)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Ready to use Azure ML 1.57.0\n"
        }
      ],
      "execution_count": 2,
      "metadata": {
        "gather": {
          "logged": 1741299866917
        }
      },
      "id": "78aebae5-c192-4d8e-a1bf-ec4213e97add"
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Connect to your workspace\n",
        "\n",
        "All experiments and associated resources are managed within your Azure Machine Learning workspace. You can connect to an existing workspace, or create a new one using the Azure Machine Learning SDK.\n",
        "\n",
        "In most cases, you should store workspace connection information in a JSON configuration file. This makes it easier to connect without needing to remember details like your Azure subscription ID. You can download the JSON configuration file from the blade for your workspace in the Azure portal or from the workspace details pane in Azure Machine Learning studio, but if you're using a compute instance within your wokspace, the configuration file has already been downloaded to the root folder.\n",
        "\n",
        "The code below uses the configuration file to connect to your workspace.\n",
        "\n",
        ">**Note:** The first time you connect to your workspace in a notebook session, you may be prompted to sign into Azure by clicking the `https://microsoft.com/devicelogin` link, entering an automatically generated code, and signing into Azure. After you have successfully signed in, you can close the browser tab that was opened and return to this notebook.\n"
      ],
      "metadata": {},
      "id": "2efe567a-6beb-4c14-b85c-c4cc18fa2ade"
    },
    {
      "cell_type": "code",
      "source": [
        "from azureml.core import Workspace, Experiment\n",
        "ws = Workspace.from_config()\n",
        "print(ws.name, \"loaded\")"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "mlw3-dp100-labs loaded\n"
        }
      ],
      "execution_count": 3,
      "metadata": {
        "gather": {
          "logged": 1741299867124
        }
      },
      "id": "14593e2c-28d0-4882-b257-7357a4f7908e"
    },
    {
      "cell_type": "markdown",
      "source": [
        "## View Azure ML resources in the workspace\n",
        "Now that you have a connection to your workspace, you can work with the resources. For example, you can use the following code to enumerate the compute resources in your workspace."
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      },
      "id": "740ba959-c851-474e-9910-66fc795dba31"
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Compute Resources:\")\n",
        "for compute_name in ws.compute_targets:\n",
        "    compute = ws.compute_targets[compute_name]\n",
        "    print(\"\\t\", compute.name, ':', compute.type)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Compute Resources:\n\t mlci3 : ComputeInstance\n\t aml-cluster : AmlCompute\n"
        }
      ],
      "execution_count": 4,
      "metadata": {
        "gather": {
          "logged": 1741299869179
        }
      },
      "id": "b12f1ed4-bc1f-4d5a-bbe2-a3269b35f3f5"
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Start an experiment"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      },
      "id": "3d0b7b40-cb4c-4100-aaed-f19722e148cf"
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "experiment = Experiment(workspace=ws, name=\"fesmailif-titanic\")\n",
        "\n",
        "run = experiment.start_logging()\n",
        "print(\"Starting experiment:\", experiment.name)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Starting experiment: fesmailif-titanic\n"
        }
      ],
      "execution_count": 5,
      "metadata": {
        "gather": {
          "logged": 1741299871260
        }
      },
      "id": "d28b45b9-203d-433e-af3a-899b6e0d31c0"
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Read data"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      },
      "id": "a6a7fcb9-baae-4ba4-bdb8-c91b3ec8c608"
    },
    {
      "cell_type": "code",
      "source": [
        "data = pd.read_csv('data/titanic.csv')\n",
        "data.head()"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 6,
          "data": {
            "text/plain": "   PassengerId  Survived  Pclass  Sex   Age  SibSp  Parch     Fare  Embarked\n0            1         0       3    1  22.0      1      0   7.2500         0\n1            2         1       1    0  38.0      1      0  71.2833         1\n2            3         1       3    0  26.0      0      0   7.9250         0\n3            4         1       1    0  35.0      1      0  53.1000         0\n4            5         0       3    1  35.0      0      0   8.0500         0",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.2500</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>71.2833</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>0</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.9250</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>53.1000</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 6,
      "metadata": {
        "gather": {
          "logged": 1741299871401
        }
      },
      "id": "ab081961-f4f6-4399-9cf0-85b58e01a43c"
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Count number of rows and log the metric"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      },
      "id": "9374335a-fc95-4f78-939d-b11d4e5ed19f"
    },
    {
      "cell_type": "code",
      "source": [
        "row_count = (len(data))\n",
        "run.log('row_count', row_count)"
      ],
      "outputs": [],
      "execution_count": 7,
      "metadata": {
        "gather": {
          "logged": 1741299871542
        }
      },
      "id": "f9b4d7a6-a52b-435f-af9c-05659f3d5fa7"
    },
    {
      "cell_type": "markdown",
      "source": [
        "## End experiment and query metrics"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      },
      "id": "eb3b3fdf-def2-443f-b7bb-81bd1a78ff28"
    },
    {
      "cell_type": "code",
      "source": [
        "run.complete()\n",
        "\n",
        "print(\"Metrics:\")\n",
        "metrics = run.get_metrics()\n",
        "for metric_name in metrics:\n",
        "    print(metric_name, \":\", metrics[metric_name])"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Metrics:\nrow_count : 891\n"
        }
      ],
      "execution_count": 8,
      "metadata": {
        "gather": {
          "logged": 1741299877707
        }
      },
      "id": "f32bc413-f8a1-4c21-8f10-ad7a15743b09"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python38-azureml",
      "language": "python",
      "display_name": "Python 3.8 - AzureML"
    },
    "language_info": {
      "name": "python",
      "version": "3.10.11",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "microsoft": {
      "ms_spell_check": {
        "ms_spell_check_language": "en"
      },
      "host": {
        "AzureML": {
          "notebookHasBeenCompleted": true
        }
      }
    },
    "kernel_info": {
      "name": "python38-azureml"
    },
    "nteract": {
      "version": "nteract-front-end@1.0.0"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}